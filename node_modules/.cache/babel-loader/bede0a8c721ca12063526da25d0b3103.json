{"ast":null,"code":"var Utils = require(\"../util\"),\n    Constants = Utils.Constants;\n/* The entries in the end of central directory */\n\n\nmodule.exports = function () {\n  var _volumeEntries = 0,\n      _totalEntries = 0,\n      _size = 0,\n      _offset = 0,\n      _commentLength = 0;\n  return {\n    get diskEntries() {\n      return _volumeEntries;\n    },\n\n    set diskEntries(\n    /*Number*/\n    val) {\n      _volumeEntries = _totalEntries = val;\n    },\n\n    get totalEntries() {\n      return _totalEntries;\n    },\n\n    set totalEntries(\n    /*Number*/\n    val) {\n      _totalEntries = _volumeEntries = val;\n    },\n\n    get size() {\n      return _size;\n    },\n\n    set size(\n    /*Number*/\n    val) {\n      _size = val;\n    },\n\n    get offset() {\n      return _offset;\n    },\n\n    set offset(\n    /*Number*/\n    val) {\n      _offset = val;\n    },\n\n    get commentLength() {\n      return _commentLength;\n    },\n\n    set commentLength(\n    /*Number*/\n    val) {\n      _commentLength = val;\n    },\n\n    get mainHeaderSize() {\n      return Constants.ENDHDR + _commentLength;\n    },\n\n    loadFromBinary: function (\n    /*Buffer*/\n    data) {\n      // data should be 22 bytes and start with \"PK 05 06\"\n      // or be 56+ bytes and start with \"PK 06 06\" for Zip64\n      if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) && (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\n        throw new Error(Utils.Errors.INVALID_END);\n      }\n\n      if (data.readUInt32LE(0) === Constants.ENDSIG) {\n        // number of entries on this volume\n        _volumeEntries = data.readUInt16LE(Constants.ENDSUB); // total number of entries\n\n        _totalEntries = data.readUInt16LE(Constants.ENDTOT); // central directory size in bytes\n\n        _size = data.readUInt32LE(Constants.ENDSIZ); // offset of first CEN header\n\n        _offset = data.readUInt32LE(Constants.ENDOFF); // zip file comment length\n\n        _commentLength = data.readUInt16LE(Constants.ENDCOM);\n      } else {\n        // number of entries on this volume\n        _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB); // total number of entries\n\n        _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT); // central directory size in bytes\n\n        _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ); // offset of first CEN header\n\n        _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\n        _commentLength = 0;\n      }\n    },\n    toBinary: function () {\n      var b = Buffer.alloc(Constants.ENDHDR + _commentLength); // \"PK 05 06\" signature\n\n      b.writeUInt32LE(Constants.ENDSIG, 0);\n      b.writeUInt32LE(0, 4); // number of entries on this volume\n\n      b.writeUInt16LE(_volumeEntries, Constants.ENDSUB); // total number of entries\n\n      b.writeUInt16LE(_totalEntries, Constants.ENDTOT); // central directory size in bytes\n\n      b.writeUInt32LE(_size, Constants.ENDSIZ); // offset of first CEN header\n\n      b.writeUInt32LE(_offset, Constants.ENDOFF); // zip file comment length\n\n      b.writeUInt16LE(_commentLength, Constants.ENDCOM); // fill comment memory with spaces so no garbage is left there\n\n      b.fill(\" \", Constants.ENDHDR);\n      return b;\n    },\n    toJSON: function () {\n      // creates 0x0000 style output\n      const offset = function (nr, len) {\n        let offs = nr.toString(16).toUpperCase();\n\n        while (offs.length < len) offs = \"0\" + offs;\n\n        return \"0x\" + offs;\n      };\n\n      return {\n        diskEntries: _volumeEntries,\n        totalEntries: _totalEntries,\n        size: _size + \" bytes\",\n        offset: offset(_offset, 4),\n        commentLength: _commentLength\n      };\n    },\n    toString: function () {\n      return JSON.stringify(this.toJSON(), null, \"\\t\");\n    }\n  };\n};","map":{"version":3,"names":["Utils","require","Constants","module","exports","_volumeEntries","_totalEntries","_size","_offset","_commentLength","diskEntries","val","totalEntries","size","offset","commentLength","mainHeaderSize","ENDHDR","loadFromBinary","data","length","readUInt32LE","ENDSIG","ZIP64HDR","ZIP64SIG","Error","Errors","INVALID_END","readUInt16LE","ENDSUB","ENDTOT","ENDSIZ","ENDOFF","ENDCOM","readBigUInt64LE","ZIP64SUB","ZIP64TOT","ZIP64SIZ","ZIP64OFF","toBinary","b","Buffer","alloc","writeUInt32LE","writeUInt16LE","fill","toJSON","nr","len","offs","toString","toUpperCase","JSON","stringify"],"sources":["/Users/andrejsmolencev/Desktop/scorm-generator/node_modules/adm-zip/headers/mainHeader.js"],"sourcesContent":["var Utils = require(\"../util\"),\n    Constants = Utils.Constants;\n\n/* The entries in the end of central directory */\nmodule.exports = function () {\n    var _volumeEntries = 0,\n        _totalEntries = 0,\n        _size = 0,\n        _offset = 0,\n        _commentLength = 0;\n\n    return {\n        get diskEntries() {\n            return _volumeEntries;\n        },\n        set diskEntries(/*Number*/ val) {\n            _volumeEntries = _totalEntries = val;\n        },\n\n        get totalEntries() {\n            return _totalEntries;\n        },\n        set totalEntries(/*Number*/ val) {\n            _totalEntries = _volumeEntries = val;\n        },\n\n        get size() {\n            return _size;\n        },\n        set size(/*Number*/ val) {\n            _size = val;\n        },\n\n        get offset() {\n            return _offset;\n        },\n        set offset(/*Number*/ val) {\n            _offset = val;\n        },\n\n        get commentLength() {\n            return _commentLength;\n        },\n        set commentLength(/*Number*/ val) {\n            _commentLength = val;\n        },\n\n        get mainHeaderSize() {\n            return Constants.ENDHDR + _commentLength;\n        },\n\n        loadFromBinary: function (/*Buffer*/ data) {\n            // data should be 22 bytes and start with \"PK 05 06\"\n            // or be 56+ bytes and start with \"PK 06 06\" for Zip64\n            if (\n                (data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) &&\n                (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)\n            ) {\n                throw new Error(Utils.Errors.INVALID_END);\n            }\n\n            if (data.readUInt32LE(0) === Constants.ENDSIG) {\n                // number of entries on this volume\n                _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\n                // total number of entries\n                _totalEntries = data.readUInt16LE(Constants.ENDTOT);\n                // central directory size in bytes\n                _size = data.readUInt32LE(Constants.ENDSIZ);\n                // offset of first CEN header\n                _offset = data.readUInt32LE(Constants.ENDOFF);\n                // zip file comment length\n                _commentLength = data.readUInt16LE(Constants.ENDCOM);\n            } else {\n                // number of entries on this volume\n                _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\n                // total number of entries\n                _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\n                // central directory size in bytes\n                _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ);\n                // offset of first CEN header\n                _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\n\n                _commentLength = 0;\n            }\n        },\n\n        toBinary: function () {\n            var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\n            // \"PK 05 06\" signature\n            b.writeUInt32LE(Constants.ENDSIG, 0);\n            b.writeUInt32LE(0, 4);\n            // number of entries on this volume\n            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\n            // total number of entries\n            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\n            // central directory size in bytes\n            b.writeUInt32LE(_size, Constants.ENDSIZ);\n            // offset of first CEN header\n            b.writeUInt32LE(_offset, Constants.ENDOFF);\n            // zip file comment length\n            b.writeUInt16LE(_commentLength, Constants.ENDCOM);\n            // fill comment memory with spaces so no garbage is left there\n            b.fill(\" \", Constants.ENDHDR);\n\n            return b;\n        },\n\n        toJSON: function () {\n            // creates 0x0000 style output\n            const offset = function (nr, len) {\n                let offs = nr.toString(16).toUpperCase();\n                while (offs.length < len) offs = \"0\" + offs;\n                return \"0x\" + offs;\n            };\n\n            return {\n                diskEntries: _volumeEntries,\n                totalEntries: _totalEntries,\n                size: _size + \" bytes\",\n                offset: offset(_offset, 4),\n                commentLength: _commentLength\n            };\n        },\n\n        toString: function () {\n            return JSON.stringify(this.toJSON(), null, \"\\t\");\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}