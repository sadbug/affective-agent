{"ast":null,"code":"/**\n * TAR Format Plugin\n *\n * @module plugins/tar\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */\nvar zlib = require('zlib');\n\nvar engine = require('tar-stream');\n\nvar util = require('archiver-utils');\n/**\n * @constructor\n * @param {TarOptions} options\n */\n\n\nvar Tar = function Tar(options) {\n  if (!(this instanceof Tar)) {\n    return new Tar(options);\n  }\n\n  options = this.options = util.defaults(options, {\n    gzip: false\n  });\n\n  if (typeof options.gzipOptions !== 'object') {\n    options.gzipOptions = {};\n  }\n\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n  this.engine = engine.pack(options);\n  this.compressor = false;\n\n  if (options.gzip) {\n    this.compressor = zlib.createGzip(options.gzipOptions);\n    this.compressor.on('error', this._onCompressorError.bind(this));\n  }\n};\n/**\n * [_onCompressorError description]\n *\n * @private\n * @param  {Error} err\n * @return void\n */\n\n\nTar.prototype._onCompressorError = function (err) {\n  this.engine.emit('error', err);\n};\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)} source\n * @param  {TarEntryData} data\n * @param  {Function} callback\n * @return void\n */\n\n\nTar.prototype.append = function (source, data, callback) {\n  var self = this;\n  data.mtime = data.date;\n\n  function append(err, sourceBuffer) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    self.engine.entry(data, sourceBuffer, function (err) {\n      callback(err, data);\n    });\n  }\n\n  if (data.sourceType === 'buffer') {\n    append(null, source);\n  } else if (data.sourceType === 'stream' && data.stats) {\n    data.size = data.stats.size;\n    var entry = self.engine.entry(data, function (err) {\n      callback(err, data);\n    });\n    source.pipe(entry);\n  } else if (data.sourceType === 'stream') {\n    util.collectStream(source, append);\n  }\n};\n/**\n * [finalize description]\n *\n * @return void\n */\n\n\nTar.prototype.finalize = function () {\n  this.engine.finalize();\n};\n/**\n * [on description]\n *\n * @return this.engine\n */\n\n\nTar.prototype.on = function () {\n  return this.engine.on.apply(this.engine, arguments);\n};\n/**\n * [pipe description]\n *\n * @param  {String} destination\n * @param  {Object} options\n * @return this.engine\n */\n\n\nTar.prototype.pipe = function (destination, options) {\n  if (this.compressor) {\n    return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);\n  } else {\n    return this.engine.pipe.apply(this.engine, arguments);\n  }\n};\n/**\n * [unpipe description]\n *\n * @return this.engine\n */\n\n\nTar.prototype.unpipe = function () {\n  if (this.compressor) {\n    return this.compressor.unpipe.apply(this.compressor, arguments);\n  } else {\n    return this.engine.unpipe.apply(this.engine, arguments);\n  }\n};\n\nmodule.exports = Tar;\n/**\n * @typedef {Object} TarOptions\n * @global\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\n */\n\n/**\n * @typedef {Object} TarEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */\n\n/**\n * TarStream Module\n * @external TarStream\n * @see {@link https://github.com/mafintosh/tar-stream}\n */","map":{"version":3,"names":["zlib","require","engine","util","Tar","options","defaults","gzip","gzipOptions","supports","directory","symlink","pack","compressor","createGzip","on","_onCompressorError","bind","prototype","err","emit","append","source","data","callback","self","mtime","date","sourceBuffer","entry","sourceType","stats","size","pipe","collectStream","finalize","apply","arguments","destination","unpipe","module","exports"],"sources":["/Users/andrejsmolencev/Desktop/scorm-generator/node_modules/archiver/lib/plugins/tar.js"],"sourcesContent":["/**\n * TAR Format Plugin\n *\n * @module plugins/tar\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */\nvar zlib = require('zlib');\n\nvar engine = require('tar-stream');\nvar util = require('archiver-utils');\n\n/**\n * @constructor\n * @param {TarOptions} options\n */\nvar Tar = function(options) {\n  if (!(this instanceof Tar)) {\n    return new Tar(options);\n  }\n\n  options = this.options = util.defaults(options, {\n    gzip: false\n  });\n\n  if (typeof options.gzipOptions !== 'object') {\n    options.gzipOptions = {};\n  }\n\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n\n  this.engine = engine.pack(options);\n  this.compressor = false;\n\n  if (options.gzip) {\n    this.compressor = zlib.createGzip(options.gzipOptions);\n    this.compressor.on('error', this._onCompressorError.bind(this));\n  }\n};\n\n/**\n * [_onCompressorError description]\n *\n * @private\n * @param  {Error} err\n * @return void\n */\nTar.prototype._onCompressorError = function(err) {\n  this.engine.emit('error', err);\n};\n\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)} source\n * @param  {TarEntryData} data\n * @param  {Function} callback\n * @return void\n */\nTar.prototype.append = function(source, data, callback) {\n  var self = this;\n\n  data.mtime = data.date;\n\n  function append(err, sourceBuffer) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    self.engine.entry(data, sourceBuffer, function(err) {\n      callback(err, data);\n    });\n  }\n\n  if (data.sourceType === 'buffer') {\n    append(null, source);\n  } else if (data.sourceType === 'stream' && data.stats) {\n    data.size = data.stats.size;\n\n    var entry = self.engine.entry(data, function(err) {\n      callback(err, data);\n    });\n\n    source.pipe(entry);\n  } else if (data.sourceType === 'stream') {\n    util.collectStream(source, append);\n  }\n};\n\n/**\n * [finalize description]\n *\n * @return void\n */\nTar.prototype.finalize = function() {\n  this.engine.finalize();\n};\n\n/**\n * [on description]\n *\n * @return this.engine\n */\nTar.prototype.on = function() {\n  return this.engine.on.apply(this.engine, arguments);\n};\n\n/**\n * [pipe description]\n *\n * @param  {String} destination\n * @param  {Object} options\n * @return this.engine\n */\nTar.prototype.pipe = function(destination, options) {\n  if (this.compressor) {\n    return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);\n  } else {\n    return this.engine.pipe.apply(this.engine, arguments);\n  }\n};\n\n/**\n * [unpipe description]\n *\n * @return this.engine\n */\nTar.prototype.unpipe = function() {\n  if (this.compressor) {\n    return this.compressor.unpipe.apply(this.compressor, arguments);\n  } else {\n    return this.engine.unpipe.apply(this.engine, arguments);\n  }\n};\n\nmodule.exports = Tar;\n\n/**\n * @typedef {Object} TarOptions\n * @global\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\n */\n\n/**\n * @typedef {Object} TarEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */\n\n/**\n * TarStream Module\n * @external TarStream\n * @see {@link https://github.com/mafintosh/tar-stream}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}