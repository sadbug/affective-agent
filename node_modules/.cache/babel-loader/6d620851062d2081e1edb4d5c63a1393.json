{"ast":null,"code":"module.exports = function (\n/*Buffer*/\ninbuf) {\n  var zlib = require(\"zlib\");\n\n  return {\n    inflate: function () {\n      return zlib.inflateRawSync(inbuf);\n    },\n    inflateAsync: function (\n    /*Function*/\n    callback) {\n      var tmp = zlib.createInflateRaw(),\n          parts = [],\n          total = 0;\n      tmp.on(\"data\", function (data) {\n        parts.push(data);\n        total += data.length;\n      });\n      tmp.on(\"end\", function () {\n        var buf = Buffer.alloc(total),\n            written = 0;\n        buf.fill(0);\n\n        for (var i = 0; i < parts.length; i++) {\n          var part = parts[i];\n          part.copy(buf, written);\n          written += part.length;\n        }\n\n        callback && callback(buf);\n      });\n      tmp.end(inbuf);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","inbuf","zlib","require","inflate","inflateRawSync","inflateAsync","callback","tmp","createInflateRaw","parts","total","on","data","push","length","buf","Buffer","alloc","written","fill","i","part","copy","end"],"sources":["/Users/andrejsmolencev/Desktop/scorm-generator/node_modules/adm-zip/methods/inflater.js"],"sourcesContent":["module.exports = function (/*Buffer*/ inbuf) {\n    var zlib = require(\"zlib\");\n\n    return {\n        inflate: function () {\n            return zlib.inflateRawSync(inbuf);\n        },\n\n        inflateAsync: function (/*Function*/ callback) {\n            var tmp = zlib.createInflateRaw(),\n                parts = [],\n                total = 0;\n            tmp.on(\"data\", function (data) {\n                parts.push(data);\n                total += data.length;\n            });\n            tmp.on(\"end\", function () {\n                var buf = Buffer.alloc(total),\n                    written = 0;\n                buf.fill(0);\n                for (var i = 0; i < parts.length; i++) {\n                    var part = parts[i];\n                    part.copy(buf, written);\n                    written += part.length;\n                }\n                callback && callback(buf);\n            });\n            tmp.end(inbuf);\n        }\n    };\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAAU;AAAWC,KAArB,EAA4B;EACzC,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;EAEA,OAAO;IACHC,OAAO,EAAE,YAAY;MACjB,OAAOF,IAAI,CAACG,cAAL,CAAoBJ,KAApB,CAAP;IACH,CAHE;IAKHK,YAAY,EAAE;IAAU;IAAaC,QAAvB,EAAiC;MAC3C,IAAIC,GAAG,GAAGN,IAAI,CAACO,gBAAL,EAAV;MAAA,IACIC,KAAK,GAAG,EADZ;MAAA,IAEIC,KAAK,GAAG,CAFZ;MAGAH,GAAG,CAACI,EAAJ,CAAO,MAAP,EAAe,UAAUC,IAAV,EAAgB;QAC3BH,KAAK,CAACI,IAAN,CAAWD,IAAX;QACAF,KAAK,IAAIE,IAAI,CAACE,MAAd;MACH,CAHD;MAIAP,GAAG,CAACI,EAAJ,CAAO,KAAP,EAAc,YAAY;QACtB,IAAII,GAAG,GAAGC,MAAM,CAACC,KAAP,CAAaP,KAAb,CAAV;QAAA,IACIQ,OAAO,GAAG,CADd;QAEAH,GAAG,CAACI,IAAJ,CAAS,CAAT;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACK,MAA1B,EAAkCM,CAAC,EAAnC,EAAuC;UACnC,IAAIC,IAAI,GAAGZ,KAAK,CAACW,CAAD,CAAhB;UACAC,IAAI,CAACC,IAAL,CAAUP,GAAV,EAAeG,OAAf;UACAA,OAAO,IAAIG,IAAI,CAACP,MAAhB;QACH;;QACDR,QAAQ,IAAIA,QAAQ,CAACS,GAAD,CAApB;MACH,CAVD;MAWAR,GAAG,CAACgB,GAAJ,CAAQvB,KAAR;IACH;EAzBE,CAAP;AA2BH,CA9BD"},"metadata":{},"sourceType":"script"}